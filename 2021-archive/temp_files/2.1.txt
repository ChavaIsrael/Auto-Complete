What's New in Python 2.1
************************

Author:
   A.M. Kuchling


Introduction
============

This article explains the new features in Python 2.1.  While there
aren't as many changes in 2.1 as there were in Python 2.0, there are
still some pleasant surprises in store.  2.1 is the first release to
be steered through the use of Python Enhancement Proposals, or PEPs,
so most of the sizable changes have accompanying PEPs that provide
more complete documentation and a design rationale for the change.
This article doesn't attempt to document the new features completely,
but simply provides an overview of the new features for Python
programmers. Refer to the Python 2.1 documentation, or to the specific
PEP, for more details about any new feature that particularly
interests you.

One recent goal of the Python development team has been to accelerate
the pace of new releases, with a new release coming every 6 to 9
months. 2.1 is the first release to come out at this faster pace, with
the first alpha appearing in January, 3 months after the final version
of 2.0 was released.

The final release of Python 2.1 was made on April 17, 2001.


PEP 227: Nested Scopes
======================

The largest change in Python 2.1 is to Python's scoping rules.  In
Python 2.0, at any given time there are at most three namespaces used
to look up variable names: local, module-level, and the built-in
namespace.  This often surprised people because it didn't match their
intuitive expectations.  For example, a nested recursive function
definition doesn't work:

   def f():
       ...
       def g(value):
           ...
           return g(value-1) + 1
       ...

The function "g()" will always raise a "NameError" exception, because
the binding of the name "g" isn't in either its local namespace or in
the module-level namespace.  This isn't much of a problem in practice
(how often do you recursively define interior functions like this?),
but this also made using the "lambda" expression clumsier, and this
was a problem in practice. In code which uses "lambda" you can often
find local variables being copied by passing them as the default
values of arguments.

   def find(self, name):
       "Return list of any entries equal to 'name'"
       L = filter(lambda x, name=name: x == name,
                  self.list_attribute)
       return L

The readability of Python code written in a strongly functional style
suffers greatly as a result.

The most significant change to Python 2.1 is that static scoping has
been added to the language to fix this problem.  As a first effect,* The size of the Unicode character database was shrunk by another
  340K thanks to Fredrik Lundh.

* Some new ports were contributed: MacOS X (by Steven Majewski),
  Cygwin (by Jason Tishler); RISCOS (by Dietmar Schwertberger);
  Unixware 7  (by Billy G. Allie).

And there's the usual list of minor bugfixes, minor memory leaks,
docstring edits, and other tweaks, too lengthy to be worth itemizing;
see the CVS logs for the full details if you want them.


Acknowledgements
================

The author would like to thank the following people for offering
suggestions on various drafts of this article: Graeme Cross, David
Goodger, Jay Graves, Michael Hudson, Marc-Andr√© Lemburg, Fredrik
Lundh, Neil Schemenauer, Thomas Wouters.
